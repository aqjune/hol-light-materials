(* Converted by thenify.py *)
ONCE_REWRITE_TAC[WORD_EQ_BITS_ALT] THEN
REWRITE_TAC[BIT_WORD_REVERSE] THEN
REPEAT STRIP_TAC THEN
SUBGOAL_THEN `n_subword_bits * (dimindex (:N) DIV n_subword_bits - 1 - i DIV n_subword_bits) + i MOD n_subword_bits <  dimindex (:N)` ASSUME_TAC THENL [
  (** SUBGOAL: my proof **)
  SUBGOAL_THEN `?x. dimindex(:N) = x * n_subword_bits` CHOOSE_TAC THENL [
    (** SUBGOAL that again has my proof, yes **)
    ASM_MESON_TAC[MOD_EQ_0];

    (** SUBGOAL after choose **)
    ASM_REWRITE_TAC[] THEN
    SUBGOAL_THEN `(x * n_subword_bits) DIV n_subword_bits = x` SUBST1_TAC THENL [
      (** SUBGOAL **)
      REWRITE_TAC[ARITH_RULE `x * n_subword_bits = n_subword_bits * x`] THEN
      MATCH_MP_TAC DIV_MULT THEN
      ASM_ARITH_TAC;

      (** SUBGOAL: after substitution **)
      MATCH_MP_TAC LEMMA_BOUND THEN
      CONJ_TAC THENL [
        (** SUBGOAL **)
        MP_TAC (SPECL [`n_subword_bits:num`; `i:num`; `x:num`] RDIV_LT_EQ) THEN
        ANTS_TAC THENL [
          (** SUBGOAL **)
          ASM_ARITH_TAC;

          (** SUBGOAL **)
          DISCH_TAC THEN
          ASM_REWRITE_TAC[] THEN
          ASM_ARITH_TAC
        ];

        (** SUBGOAL of conj_tac **)
        CONJ_TAC THENL [
          (** SUBGOAL 1 of conj **)
          REWRITE_TAC[MOD_LT_EQ] THEN
          ASM_ARITH_TAC;

          (** SUBGOAL 2 of conj **)
          UNDISCH_TAC `0 < n_subword_bits` THEN
          SUBGOAL_THEN `~(dimindex(:N) = 0)` ASSUME_TAC THENL [
            (** SUBGOAL **)
            MATCH_MP_TAC LT_NZ2 THEN
            EXISTS_TAC `i:num` THEN
            ASM_MESON_TAC[];

            (** SUBGOAL **)
            REWRITE_TAC[LT_NZ] THEN
            UNDISCH_TAC `~(dimindex (:N) = 0)` THEN
            ASM_REWRITE_TAC[] THEN
            REPEAT STRIP_TAC THEN
            SUBGOAL_THEN `~(x = 0) /\ ~(n_subword_bits = 0)` ASSUME_TAC THENL [
              (** SUBGOAL **)
              MATCH_MP_TAC MULT_NONZERO THEN
              ASM_MESON_TAC[];

              (** SUBGOAL **)
              ASM_MESON_TAC[]
            ]
          ]
        ]
      ]
    ]
  ];

  (** SUBGOAL **)
  ASM_SIMP_TAC[] THEN
  AP_THM_TAC THEN AP_TERM_TAC THEN
  UNDISCH_TAC `dimindex (:N) MOD n_subword_bits = 0` THEN REWRITE_TAC[REWRITE_RULE[MULT_SYM] MOD_EQ_0]
    THEN DISCH_TAC THEN FIRST_X_ASSUM CHOOSE_TAC THEN
  ASM_REWRITE_TAC[] THEN
  IMP_REWRITE_TAC[DIV_MULT; DIV_MULT_ADD; MOD_DIV_EQ_0] THEN
  REWRITE_TAC[MOD_MULT_ADD; ADD_0; MOD_MOD_REFL] THEN
  IMP_REWRITE_TAC[SUB_SUB] THEN
  REWRITE_TAC[DIVISION_SIMP] THEN
  CONJ_TAC THENL [
    (** SUBGOAL **)
    UNDISCH_TAC `i < dimindex (:N)` THEN
    ASM_REWRITE_TAC[] THEN
    IMP_REWRITE_TAC[GSYM RDIV_LT_EQ] THEN
    ANTS_TAC THENL [
      (** SUBGOAL **)
      ASM_ARITH_TAC;

      (** SUBGOAL **)
      ASM_ARITH_TAC
    ];

    (** SUBGOAL **)
    ASM_ARITH_TAC
  ]
]
